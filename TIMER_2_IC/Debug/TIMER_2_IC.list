
TIMER_2_IC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021b4  080021b4  000121b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021c4  080021c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080021c4  080021c4  000121c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021cc  080021cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021cc  080021cc  000121cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021d0  080021d0  000121d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  080021e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080021e0  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096a8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001563  00000000  00000000  000296e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  0002ac48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021203  00000000  00000000  0002be50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000072f4  00000000  00000000  0004d053  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd4da  00000000  00000000  00054347  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121821  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002680  00000000  00000000  0012189c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800219c 	.word	0x0800219c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800219c 	.word	0x0800219c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f92b 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f001 fd30 	bl	8001f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f943 	bl	80007f2 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f90b 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db0b      	blt.n	8000676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	4907      	ldr	r1, [pc, #28]	; (8000684 <__NVIC_EnableIRQ+0x38>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	2001      	movs	r0, #1
 800066e:	fa00 f202 	lsl.w	r2, r0, r2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	490c      	ldr	r1, [pc, #48]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	f04f 32ff 	mov.w	r2, #4294967295
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43da      	mvns	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	401a      	ands	r2, r3
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000724:	f04f 31ff 	mov.w	r1, #4294967295
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43d9      	mvns	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f7ff ff8e 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff29 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff3e 	bl	8000630 <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff8e 	bl	80006dc <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5d 	bl	8000688 <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff31 	bl	800064c <__NVIC_EnableIRQ>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffa2 	bl	8000744 <SysTick_Config>
 8000800:	4603      	mov	r3, r0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800080e:	f000 f802 	bl	8000816 <HAL_SYSTICK_Callback>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	e165      	b.n	8000b0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000840:	2201      	movs	r2, #1
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	429a      	cmp	r2, r3
 800085a:	f040 8154 	bne.w	8000b06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d00b      	beq.n	800087e <HAL_GPIO_Init+0x5a>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d007      	beq.n	800087e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000872:	2b11      	cmp	r3, #17
 8000874:	d003      	beq.n	800087e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b12      	cmp	r3, #18
 800087c:	d130      	bne.n	80008e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4013      	ands	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b4:	2201      	movs	r2, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	f003 0201 	and.w	r2, r3, #1
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	4313      	orrs	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d003      	beq.n	8000920 <HAL_GPIO_Init+0xfc>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b12      	cmp	r3, #18
 800091e:	d123      	bne.n	8000968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	08da      	lsrs	r2, r3, #3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3208      	adds	r2, #8
 8000928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	f003 0307 	and.w	r3, r3, #7
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	220f      	movs	r2, #15
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	691a      	ldr	r2, [r3, #16]
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	69b9      	ldr	r1, [r7, #24]
 8000964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0203 	and.w	r2, r3, #3
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4313      	orrs	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f000 80ae 	beq.w	8000b06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b5c      	ldr	r3, [pc, #368]	; (8000b20 <HAL_GPIO_Init+0x2fc>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a5b      	ldr	r2, [pc, #364]	; (8000b20 <HAL_GPIO_Init+0x2fc>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b59      	ldr	r3, [pc, #356]	; (8000b20 <HAL_GPIO_Init+0x2fc>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009c6:	4a57      	ldr	r2, [pc, #348]	; (8000b24 <HAL_GPIO_Init+0x300>)
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4e      	ldr	r2, [pc, #312]	; (8000b28 <HAL_GPIO_Init+0x304>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d025      	beq.n	8000a3e <HAL_GPIO_Init+0x21a>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4d      	ldr	r2, [pc, #308]	; (8000b2c <HAL_GPIO_Init+0x308>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d01f      	beq.n	8000a3a <HAL_GPIO_Init+0x216>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4c      	ldr	r2, [pc, #304]	; (8000b30 <HAL_GPIO_Init+0x30c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d019      	beq.n	8000a36 <HAL_GPIO_Init+0x212>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4b      	ldr	r2, [pc, #300]	; (8000b34 <HAL_GPIO_Init+0x310>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0x20e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4a      	ldr	r2, [pc, #296]	; (8000b38 <HAL_GPIO_Init+0x314>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00d      	beq.n	8000a2e <HAL_GPIO_Init+0x20a>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a49      	ldr	r2, [pc, #292]	; (8000b3c <HAL_GPIO_Init+0x318>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d007      	beq.n	8000a2a <HAL_GPIO_Init+0x206>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a48      	ldr	r2, [pc, #288]	; (8000b40 <HAL_GPIO_Init+0x31c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_GPIO_Init+0x202>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00c      	b.n	8000a40 <HAL_GPIO_Init+0x21c>
 8000a26:	2307      	movs	r3, #7
 8000a28:	e00a      	b.n	8000a40 <HAL_GPIO_Init+0x21c>
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	e008      	b.n	8000a40 <HAL_GPIO_Init+0x21c>
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e006      	b.n	8000a40 <HAL_GPIO_Init+0x21c>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e004      	b.n	8000a40 <HAL_GPIO_Init+0x21c>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e002      	b.n	8000a40 <HAL_GPIO_Init+0x21c>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x21c>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	69fa      	ldr	r2, [r7, #28]
 8000a42:	f002 0203 	and.w	r2, r2, #3
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a50:	4934      	ldr	r1, [pc, #208]	; (8000b24 <HAL_GPIO_Init+0x300>)
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5e:	4b39      	ldr	r3, [pc, #228]	; (8000b44 <HAL_GPIO_Init+0x320>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a82:	4a30      	ldr	r2, [pc, #192]	; (8000b44 <HAL_GPIO_Init+0x320>)
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <HAL_GPIO_Init+0x320>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4013      	ands	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aac:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <HAL_GPIO_Init+0x320>)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <HAL_GPIO_Init+0x320>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <HAL_GPIO_Init+0x320>)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_GPIO_Init+0x320>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b00:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_GPIO_Init+0x320>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	f67f ae96 	bls.w	8000840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b14:	bf00      	nop
 8000b16:	3724      	adds	r7, #36	; 0x24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40013800 	.word	0x40013800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40021400 	.word	0x40021400
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e0cc      	b.n	8000cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b5c:	4b68      	ldr	r3, [pc, #416]	; (8000d00 <HAL_RCC_ClockConfig+0x1b8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d90c      	bls.n	8000b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b6a:	4b65      	ldr	r3, [pc, #404]	; (8000d00 <HAL_RCC_ClockConfig+0x1b8>)
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b72:	4b63      	ldr	r3, [pc, #396]	; (8000d00 <HAL_RCC_ClockConfig+0x1b8>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d001      	beq.n	8000b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e0b8      	b.n	8000cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d020      	beq.n	8000bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b9c:	4b59      	ldr	r3, [pc, #356]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	4a58      	ldr	r2, [pc, #352]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000ba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d005      	beq.n	8000bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bb4:	4b53      	ldr	r3, [pc, #332]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	4a52      	ldr	r2, [pc, #328]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bc0:	4b50      	ldr	r3, [pc, #320]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	494d      	ldr	r1, [pc, #308]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d044      	beq.n	8000c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d107      	bne.n	8000bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be6:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d119      	bne.n	8000c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e07f      	b.n	8000cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d003      	beq.n	8000c06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d107      	bne.n	8000c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c06:	4b3f      	ldr	r3, [pc, #252]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d109      	bne.n	8000c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e06f      	b.n	8000cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c16:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e067      	b.n	8000cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f023 0203 	bic.w	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	4934      	ldr	r1, [pc, #208]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000c34:	4313      	orrs	r3, r2
 8000c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c38:	f7ff fcca 	bl	80005d0 <HAL_GetTick>
 8000c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c3e:	e00a      	b.n	8000c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c40:	f7ff fcc6 	bl	80005d0 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e04f      	b.n	8000cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c56:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f003 020c 	and.w	r2, r3, #12
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d1eb      	bne.n	8000c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c68:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <HAL_RCC_ClockConfig+0x1b8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 030f 	and.w	r3, r3, #15
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d20c      	bcs.n	8000c90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <HAL_RCC_ClockConfig+0x1b8>)
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_RCC_ClockConfig+0x1b8>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d001      	beq.n	8000c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e032      	b.n	8000cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d008      	beq.n	8000cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	4916      	ldr	r1, [pc, #88]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d009      	beq.n	8000cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	490e      	ldr	r1, [pc, #56]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cce:	f000 f895 	bl	8000dfc <HAL_RCC_GetSysClockFreq>
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_RCC_ClockConfig+0x1bc>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_RCC_ClockConfig+0x1c0>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <HAL_RCC_ClockConfig+0x1c4>)
 8000ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_RCC_ClockConfig+0x1c8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fc2a 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00
 8000d04:	40023800 	.word	0x40023800
 8000d08:	080021b4 	.word	0x080021b4
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000000 	.word	0x20000000

08000d14 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d129      	bne.n	8000d7a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <HAL_RCC_MCOConfig+0xc4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <HAL_RCC_MCOConfig+0xc4>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_RCC_MCOConfig+0xc4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8000d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481f      	ldr	r0, [pc, #124]	; (8000ddc <HAL_RCC_MCOConfig+0xc8>)
 8000d60:	f7ff fd60 	bl	8000824 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_RCC_MCOConfig+0xc4>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	430b      	orrs	r3, r1
 8000d72:	4919      	ldr	r1, [pc, #100]	; (8000dd8 <HAL_RCC_MCOConfig+0xc4>)
 8000d74:	4313      	orrs	r3, r2
 8000d76:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000d78:	e029      	b.n	8000dce <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_RCC_MCOConfig+0xc4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <HAL_RCC_MCOConfig+0xc4>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_RCC_MCOConfig+0xc4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8000d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_RCC_MCOConfig+0xcc>)
 8000db4:	f7ff fd36 	bl	8000824 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_RCC_MCOConfig+0xc4>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	00d9      	lsls	r1, r3, #3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	4903      	ldr	r1, [pc, #12]	; (8000dd8 <HAL_RCC_MCOConfig+0xc4>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	608b      	str	r3, [r1, #8]
}
 8000dce:	bf00      	nop
 8000dd0:	3730      	adds	r7, #48	; 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020800 	.word	0x40020800

08000de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008

08000dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e16:	4bc6      	ldr	r3, [pc, #792]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	2b0c      	cmp	r3, #12
 8000e20:	f200 817e 	bhi.w	8001120 <HAL_RCC_GetSysClockFreq+0x324>
 8000e24:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <HAL_RCC_GetSysClockFreq+0x30>)
 8000e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2a:	bf00      	nop
 8000e2c:	08000e61 	.word	0x08000e61
 8000e30:	08001121 	.word	0x08001121
 8000e34:	08001121 	.word	0x08001121
 8000e38:	08001121 	.word	0x08001121
 8000e3c:	08000e67 	.word	0x08000e67
 8000e40:	08001121 	.word	0x08001121
 8000e44:	08001121 	.word	0x08001121
 8000e48:	08001121 	.word	0x08001121
 8000e4c:	08000e6d 	.word	0x08000e6d
 8000e50:	08001121 	.word	0x08001121
 8000e54:	08001121 	.word	0x08001121
 8000e58:	08001121 	.word	0x08001121
 8000e5c:	08000fc9 	.word	0x08000fc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e60:	4bb4      	ldr	r3, [pc, #720]	; (8001134 <HAL_RCC_GetSysClockFreq+0x338>)
 8000e62:	613b      	str	r3, [r7, #16]
       break;
 8000e64:	e15f      	b.n	8001126 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e66:	4bb4      	ldr	r3, [pc, #720]	; (8001138 <HAL_RCC_GetSysClockFreq+0x33c>)
 8000e68:	613b      	str	r3, [r7, #16]
      break;
 8000e6a:	e15c      	b.n	8001126 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e6c:	4bb0      	ldr	r3, [pc, #704]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e74:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e76:	4bae      	ldr	r3, [pc, #696]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d04a      	beq.n	8000f18 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e82:	4bab      	ldr	r3, [pc, #684]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	099b      	lsrs	r3, r3, #6
 8000e88:	f04f 0400 	mov.w	r4, #0
 8000e8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	ea03 0501 	and.w	r5, r3, r1
 8000e98:	ea04 0602 	and.w	r6, r4, r2
 8000e9c:	4629      	mov	r1, r5
 8000e9e:	4632      	mov	r2, r6
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	f04f 0400 	mov.w	r4, #0
 8000ea8:	0154      	lsls	r4, r2, #5
 8000eaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000eae:	014b      	lsls	r3, r1, #5
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4622      	mov	r2, r4
 8000eb4:	1b49      	subs	r1, r1, r5
 8000eb6:	eb62 0206 	sbc.w	r2, r2, r6
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	f04f 0400 	mov.w	r4, #0
 8000ec2:	0194      	lsls	r4, r2, #6
 8000ec4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000ec8:	018b      	lsls	r3, r1, #6
 8000eca:	1a5b      	subs	r3, r3, r1
 8000ecc:	eb64 0402 	sbc.w	r4, r4, r2
 8000ed0:	f04f 0100 	mov.w	r1, #0
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	00e2      	lsls	r2, r4, #3
 8000eda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000ede:	00d9      	lsls	r1, r3, #3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4614      	mov	r4, r2
 8000ee4:	195b      	adds	r3, r3, r5
 8000ee6:	eb44 0406 	adc.w	r4, r4, r6
 8000eea:	f04f 0100 	mov.w	r1, #0
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	0262      	lsls	r2, r4, #9
 8000ef4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000ef8:	0259      	lsls	r1, r3, #9
 8000efa:	460b      	mov	r3, r1
 8000efc:	4614      	mov	r4, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	4621      	mov	r1, r4
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f04f 0400 	mov.w	r4, #0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	f7ff f97a 	bl	8000204 <__aeabi_uldivmod>
 8000f10:	4603      	mov	r3, r0
 8000f12:	460c      	mov	r4, r1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e049      	b.n	8000fac <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f18:	4b85      	ldr	r3, [pc, #532]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	099b      	lsrs	r3, r3, #6
 8000f1e:	f04f 0400 	mov.w	r4, #0
 8000f22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	ea03 0501 	and.w	r5, r3, r1
 8000f2e:	ea04 0602 	and.w	r6, r4, r2
 8000f32:	4629      	mov	r1, r5
 8000f34:	4632      	mov	r2, r6
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	f04f 0400 	mov.w	r4, #0
 8000f3e:	0154      	lsls	r4, r2, #5
 8000f40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f44:	014b      	lsls	r3, r1, #5
 8000f46:	4619      	mov	r1, r3
 8000f48:	4622      	mov	r2, r4
 8000f4a:	1b49      	subs	r1, r1, r5
 8000f4c:	eb62 0206 	sbc.w	r2, r2, r6
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	f04f 0400 	mov.w	r4, #0
 8000f58:	0194      	lsls	r4, r2, #6
 8000f5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f5e:	018b      	lsls	r3, r1, #6
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	eb64 0402 	sbc.w	r4, r4, r2
 8000f66:	f04f 0100 	mov.w	r1, #0
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	00e2      	lsls	r2, r4, #3
 8000f70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f74:	00d9      	lsls	r1, r3, #3
 8000f76:	460b      	mov	r3, r1
 8000f78:	4614      	mov	r4, r2
 8000f7a:	195b      	adds	r3, r3, r5
 8000f7c:	eb44 0406 	adc.w	r4, r4, r6
 8000f80:	f04f 0100 	mov.w	r1, #0
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	02a2      	lsls	r2, r4, #10
 8000f8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f8e:	0299      	lsls	r1, r3, #10
 8000f90:	460b      	mov	r3, r1
 8000f92:	4614      	mov	r4, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	4621      	mov	r1, r4
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f04f 0400 	mov.w	r4, #0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	f7ff f92f 	bl	8000204 <__aeabi_uldivmod>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460c      	mov	r4, r1
 8000faa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fac:	4b60      	ldr	r3, [pc, #384]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	0c1b      	lsrs	r3, r3, #16
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc4:	613b      	str	r3, [r7, #16]
      break;
 8000fc6:	e0ae      	b.n	8001126 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fc8:	4b59      	ldr	r3, [pc, #356]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fd0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fd2:	4b57      	ldr	r3, [pc, #348]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d04a      	beq.n	8001074 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fde:	4b54      	ldr	r3, [pc, #336]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	099b      	lsrs	r3, r3, #6
 8000fe4:	f04f 0400 	mov.w	r4, #0
 8000fe8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	ea03 0501 	and.w	r5, r3, r1
 8000ff4:	ea04 0602 	and.w	r6, r4, r2
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	4632      	mov	r2, r6
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	f04f 0400 	mov.w	r4, #0
 8001004:	0154      	lsls	r4, r2, #5
 8001006:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800100a:	014b      	lsls	r3, r1, #5
 800100c:	4619      	mov	r1, r3
 800100e:	4622      	mov	r2, r4
 8001010:	1b49      	subs	r1, r1, r5
 8001012:	eb62 0206 	sbc.w	r2, r2, r6
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	f04f 0400 	mov.w	r4, #0
 800101e:	0194      	lsls	r4, r2, #6
 8001020:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001024:	018b      	lsls	r3, r1, #6
 8001026:	1a5b      	subs	r3, r3, r1
 8001028:	eb64 0402 	sbc.w	r4, r4, r2
 800102c:	f04f 0100 	mov.w	r1, #0
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	00e2      	lsls	r2, r4, #3
 8001036:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800103a:	00d9      	lsls	r1, r3, #3
 800103c:	460b      	mov	r3, r1
 800103e:	4614      	mov	r4, r2
 8001040:	195b      	adds	r3, r3, r5
 8001042:	eb44 0406 	adc.w	r4, r4, r6
 8001046:	f04f 0100 	mov.w	r1, #0
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	0262      	lsls	r2, r4, #9
 8001050:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001054:	0259      	lsls	r1, r3, #9
 8001056:	460b      	mov	r3, r1
 8001058:	4614      	mov	r4, r2
 800105a:	4618      	mov	r0, r3
 800105c:	4621      	mov	r1, r4
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f04f 0400 	mov.w	r4, #0
 8001064:	461a      	mov	r2, r3
 8001066:	4623      	mov	r3, r4
 8001068:	f7ff f8cc 	bl	8000204 <__aeabi_uldivmod>
 800106c:	4603      	mov	r3, r0
 800106e:	460c      	mov	r4, r1
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e049      	b.n	8001108 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	099b      	lsrs	r3, r3, #6
 800107a:	f04f 0400 	mov.w	r4, #0
 800107e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	ea03 0501 	and.w	r5, r3, r1
 800108a:	ea04 0602 	and.w	r6, r4, r2
 800108e:	4629      	mov	r1, r5
 8001090:	4632      	mov	r2, r6
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	f04f 0400 	mov.w	r4, #0
 800109a:	0154      	lsls	r4, r2, #5
 800109c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010a0:	014b      	lsls	r3, r1, #5
 80010a2:	4619      	mov	r1, r3
 80010a4:	4622      	mov	r2, r4
 80010a6:	1b49      	subs	r1, r1, r5
 80010a8:	eb62 0206 	sbc.w	r2, r2, r6
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	f04f 0400 	mov.w	r4, #0
 80010b4:	0194      	lsls	r4, r2, #6
 80010b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80010ba:	018b      	lsls	r3, r1, #6
 80010bc:	1a5b      	subs	r3, r3, r1
 80010be:	eb64 0402 	sbc.w	r4, r4, r2
 80010c2:	f04f 0100 	mov.w	r1, #0
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	00e2      	lsls	r2, r4, #3
 80010cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80010d0:	00d9      	lsls	r1, r3, #3
 80010d2:	460b      	mov	r3, r1
 80010d4:	4614      	mov	r4, r2
 80010d6:	195b      	adds	r3, r3, r5
 80010d8:	eb44 0406 	adc.w	r4, r4, r6
 80010dc:	f04f 0100 	mov.w	r1, #0
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	02a2      	lsls	r2, r4, #10
 80010e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80010ea:	0299      	lsls	r1, r3, #10
 80010ec:	460b      	mov	r3, r1
 80010ee:	4614      	mov	r4, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	4621      	mov	r1, r4
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f04f 0400 	mov.w	r4, #0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4623      	mov	r3, r4
 80010fe:	f7ff f881 	bl	8000204 <__aeabi_uldivmod>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_RCC_GetSysClockFreq+0x334>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	0f1b      	lsrs	r3, r3, #28
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	fbb2 f3f3 	udiv	r3, r2, r3
 800111c:	613b      	str	r3, [r7, #16]
      break;
 800111e:	e002      	b.n	8001126 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <HAL_RCC_GetSysClockFreq+0x338>)
 8001122:	613b      	str	r3, [r7, #16]
      break;
 8001124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001126:	693b      	ldr	r3, [r7, #16]
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	00f42400 	.word	0x00f42400
 8001138:	007a1200 	.word	0x007a1200

0800113c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 8083 	beq.w	800125c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001156:	4b95      	ldr	r3, [pc, #596]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b04      	cmp	r3, #4
 8001160:	d019      	beq.n	8001196 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001162:	4b92      	ldr	r3, [pc, #584]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800116a:	2b08      	cmp	r3, #8
 800116c:	d106      	bne.n	800117c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800116e:	4b8f      	ldr	r3, [pc, #572]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800117a:	d00c      	beq.n	8001196 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117c:	4b8b      	ldr	r3, [pc, #556]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001184:	2b0c      	cmp	r3, #12
 8001186:	d112      	bne.n	80011ae <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001188:	4b88      	ldr	r3, [pc, #544]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001194:	d10b      	bne.n	80011ae <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001196:	4b85      	ldr	r3, [pc, #532]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d05b      	beq.n	800125a <HAL_RCC_OscConfig+0x11e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d157      	bne.n	800125a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e216      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x8a>
 80011b8:	4b7c      	ldr	r3, [pc, #496]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a7b      	ldr	r2, [pc, #492]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	e01d      	b.n	8001202 <HAL_RCC_OscConfig+0xc6>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ce:	d10c      	bne.n	80011ea <HAL_RCC_OscConfig+0xae>
 80011d0:	4b76      	ldr	r3, [pc, #472]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a75      	ldr	r2, [pc, #468]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b73      	ldr	r3, [pc, #460]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a72      	ldr	r2, [pc, #456]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e00b      	b.n	8001202 <HAL_RCC_OscConfig+0xc6>
 80011ea:	4b70      	ldr	r3, [pc, #448]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a6f      	ldr	r2, [pc, #444]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b6d      	ldr	r3, [pc, #436]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a6c      	ldr	r2, [pc, #432]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80011fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001200:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d013      	beq.n	8001232 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff f9e1 	bl	80005d0 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001212:	f7ff f9dd 	bl	80005d0 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b64      	cmp	r3, #100	; 0x64
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e1db      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001224:	4b61      	ldr	r3, [pc, #388]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0xd6>
 8001230:	e014      	b.n	800125c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001232:	f7ff f9cd 	bl	80005d0 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123a:	f7ff f9c9 	bl	80005d0 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b64      	cmp	r3, #100	; 0x64
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e1c7      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124c:	4b57      	ldr	r3, [pc, #348]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f0      	bne.n	800123a <HAL_RCC_OscConfig+0xfe>
 8001258:	e000      	b.n	800125c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d06f      	beq.n	8001348 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001268:	4b50      	ldr	r3, [pc, #320]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b00      	cmp	r3, #0
 8001272:	d017      	beq.n	80012a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001274:	4b4d      	ldr	r3, [pc, #308]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800127c:	2b08      	cmp	r3, #8
 800127e:	d105      	bne.n	800128c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001280:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00b      	beq.n	80012a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128c:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d11c      	bne.n	80012d2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d116      	bne.n	80012d2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a4:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_OscConfig+0x180>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e18f      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4938      	ldr	r1, [pc, #224]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d0:	e03a      	b.n	8001348 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d020      	beq.n	800131c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <HAL_RCC_OscConfig+0x274>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff f976 	bl	80005d0 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff f972 	bl	80005d0 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e170      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4925      	ldr	r1, [pc, #148]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
 800131a:	e015      	b.n	8001348 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <HAL_RCC_OscConfig+0x274>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001322:	f7ff f955 	bl	80005d0 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff f951 	bl	80005d0 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e14f      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d037      	beq.n	80013c4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d016      	beq.n	800138a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_RCC_OscConfig+0x278>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001362:	f7ff f935 	bl	80005d0 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136a:	f7ff f931 	bl	80005d0 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e12f      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x270>)
 800137e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x22e>
 8001388:	e01c      	b.n	80013c4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_RCC_OscConfig+0x278>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff f91e 	bl	80005d0 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001396:	e00f      	b.n	80013b8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff f91a 	bl	80005d0 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d908      	bls.n	80013b8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e118      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	42470000 	.word	0x42470000
 80013b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	4b8a      	ldr	r3, [pc, #552]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 80013ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e9      	bne.n	8001398 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8097 	beq.w	8001500 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d6:	4b83      	ldr	r3, [pc, #524]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10f      	bne.n	8001402 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a7e      	ldr	r2, [pc, #504]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	4b79      	ldr	r3, [pc, #484]	; (80015e8 <HAL_RCC_OscConfig+0x4ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d118      	bne.n	8001440 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140e:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <HAL_RCC_OscConfig+0x4ac>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a75      	ldr	r2, [pc, #468]	; (80015e8 <HAL_RCC_OscConfig+0x4ac>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141a:	f7ff f8d9 	bl	80005d0 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001422:	f7ff f8d5 	bl	80005d0 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0d3      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001434:	4b6c      	ldr	r3, [pc, #432]	; (80015e8 <HAL_RCC_OscConfig+0x4ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x31a>
 8001448:	4b66      	ldr	r3, [pc, #408]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 800144a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144c:	4a65      	ldr	r2, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6713      	str	r3, [r2, #112]	; 0x70
 8001454:	e01c      	b.n	8001490 <HAL_RCC_OscConfig+0x354>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b05      	cmp	r3, #5
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x33c>
 800145e:	4b61      	ldr	r3, [pc, #388]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	4a60      	ldr	r2, [pc, #384]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6713      	str	r3, [r2, #112]	; 0x70
 800146a:	4b5e      	ldr	r3, [pc, #376]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	4a5d      	ldr	r2, [pc, #372]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6713      	str	r3, [r2, #112]	; 0x70
 8001476:	e00b      	b.n	8001490 <HAL_RCC_OscConfig+0x354>
 8001478:	4b5a      	ldr	r3, [pc, #360]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	4a59      	ldr	r2, [pc, #356]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	6713      	str	r3, [r2, #112]	; 0x70
 8001484:	4b57      	ldr	r3, [pc, #348]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	4a56      	ldr	r2, [pc, #344]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 800148a:	f023 0304 	bic.w	r3, r3, #4
 800148e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d015      	beq.n	80014c4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff f89a 	bl	80005d0 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a0:	f7ff f896 	bl	80005d0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e092      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b6:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0ee      	beq.n	80014a0 <HAL_RCC_OscConfig+0x364>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff f884 	bl	80005d0 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014cc:	f7ff f880 	bl	80005d0 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e07c      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e2:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ee      	bne.n	80014cc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f4:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a3a      	ldr	r2, [pc, #232]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 80014fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d068      	beq.n	80015da <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001508:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b08      	cmp	r3, #8
 8001512:	d060      	beq.n	80015d6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d145      	bne.n	80015a8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_RCC_OscConfig+0x4b0>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff f855 	bl	80005d0 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff f851 	bl	80005d0 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e04f      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153c:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f0      	bne.n	800152a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	019b      	lsls	r3, r3, #6
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	3b01      	subs	r3, #1
 8001562:	041b      	lsls	r3, r3, #16
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	061b      	lsls	r3, r3, #24
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	071b      	lsls	r3, r3, #28
 8001574:	491b      	ldr	r1, [pc, #108]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_RCC_OscConfig+0x4b0>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff f826 	bl	80005d0 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff f822 	bl	80005d0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e020      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x44c>
 80015a6:	e018      	b.n	80015da <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_RCC_OscConfig+0x4b0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff f80f 	bl	80005d0 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff f80b 	bl	80005d0 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e009      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_RCC_OscConfig+0x4a8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x47a>
 80015d4:	e001      	b.n	80015da <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40007000 	.word	0x40007000
 80015ec:	42470060 	.word	0x42470060

080015f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e01d      	b.n	800163e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fd02 	bl	8002020 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3304      	adds	r3, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f000 f9e0 	bl	80019f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b02      	cmp	r3, #2
 800165a:	d122      	bne.n	80016a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b02      	cmp	r3, #2
 8001668:	d11b      	bne.n	80016a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f06f 0202 	mvn.w	r2, #2
 8001672:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f994 	bl	80019b6 <HAL_TIM_IC_CaptureCallback>
 800168e:	e005      	b.n	800169c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f986 	bl	80019a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f997 	bl	80019ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d122      	bne.n	80016f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d11b      	bne.n	80016f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f06f 0204 	mvn.w	r2, #4
 80016c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2202      	movs	r2, #2
 80016cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f96a 	bl	80019b6 <HAL_TIM_IC_CaptureCallback>
 80016e2:	e005      	b.n	80016f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f95c 	bl	80019a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f96d 	bl	80019ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b08      	cmp	r3, #8
 8001702:	d122      	bne.n	800174a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b08      	cmp	r3, #8
 8001710:	d11b      	bne.n	800174a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f06f 0208 	mvn.w	r2, #8
 800171a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2204      	movs	r2, #4
 8001720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f940 	bl	80019b6 <HAL_TIM_IC_CaptureCallback>
 8001736:	e005      	b.n	8001744 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f932 	bl	80019a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f943 	bl	80019ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b10      	cmp	r3, #16
 8001756:	d122      	bne.n	800179e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b10      	cmp	r3, #16
 8001764:	d11b      	bne.n	800179e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f06f 0210 	mvn.w	r2, #16
 800176e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2208      	movs	r2, #8
 8001774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f916 	bl	80019b6 <HAL_TIM_IC_CaptureCallback>
 800178a:	e005      	b.n	8001798 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f908 	bl	80019a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f919 	bl	80019ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10e      	bne.n	80017ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f06f 0201 	mvn.w	r2, #1
 80017c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f8e2 	bl	800198e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d4:	2b80      	cmp	r3, #128	; 0x80
 80017d6:	d10e      	bne.n	80017f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	2b80      	cmp	r3, #128	; 0x80
 80017e4:	d107      	bne.n	80017f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fad3 	bl	8001d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001800:	2b40      	cmp	r3, #64	; 0x40
 8001802:	d10e      	bne.n	8001822 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180e:	2b40      	cmp	r3, #64	; 0x40
 8001810:	d107      	bne.n	8001822 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800181a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f8de 	bl	80019de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b20      	cmp	r3, #32
 800182e:	d10e      	bne.n	800184e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	2b20      	cmp	r3, #32
 800183c:	d107      	bne.n	800184e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f06f 0220 	mvn.w	r2, #32
 8001846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fa9d 	bl	8001d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_TIM_IC_ConfigChannel+0x1a>
 800186c:	2302      	movs	r3, #2
 800186e:	e08a      	b.n	8001986 <HAL_TIM_IC_ConfigChannel+0x130>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d11b      	bne.n	80018be <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	6819      	ldr	r1, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f000 f94d 	bl	8001b34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 020c 	bic.w	r2, r2, #12
 80018a8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6999      	ldr	r1, [r3, #24]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	619a      	str	r2, [r3, #24]
 80018bc:	e05a      	b.n	8001974 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d11c      	bne.n	80018fe <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	6819      	ldr	r1, [r3, #0]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f000 f9a2 	bl	8001c1c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80018e6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6999      	ldr	r1, [r3, #24]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	021a      	lsls	r2, r3, #8
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	619a      	str	r2, [r3, #24]
 80018fc:	e03a      	b.n	8001974 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d11b      	bne.n	800193c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	6819      	ldr	r1, [r3, #0]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f000 f9bf 	bl	8001c96 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 020c 	bic.w	r2, r2, #12
 8001926:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	69d9      	ldr	r1, [r3, #28]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	61da      	str	r2, [r3, #28]
 800193a:	e01b      	b.n	8001974 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f000 f9df 	bl	8001d0e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800195e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69d9      	ldr	r1, [r3, #28]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	021a      	lsls	r2, r3, #8
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a40      	ldr	r2, [pc, #256]	; (8001b08 <TIM_Base_SetConfig+0x114>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d013      	beq.n	8001a34 <TIM_Base_SetConfig+0x40>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a12:	d00f      	beq.n	8001a34 <TIM_Base_SetConfig+0x40>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a3d      	ldr	r2, [pc, #244]	; (8001b0c <TIM_Base_SetConfig+0x118>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00b      	beq.n	8001a34 <TIM_Base_SetConfig+0x40>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a3c      	ldr	r2, [pc, #240]	; (8001b10 <TIM_Base_SetConfig+0x11c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d007      	beq.n	8001a34 <TIM_Base_SetConfig+0x40>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a3b      	ldr	r2, [pc, #236]	; (8001b14 <TIM_Base_SetConfig+0x120>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d003      	beq.n	8001a34 <TIM_Base_SetConfig+0x40>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a3a      	ldr	r2, [pc, #232]	; (8001b18 <TIM_Base_SetConfig+0x124>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d108      	bne.n	8001a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a2f      	ldr	r2, [pc, #188]	; (8001b08 <TIM_Base_SetConfig+0x114>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d02b      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a54:	d027      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a2c      	ldr	r2, [pc, #176]	; (8001b0c <TIM_Base_SetConfig+0x118>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d023      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <TIM_Base_SetConfig+0x11c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01f      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <TIM_Base_SetConfig+0x120>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01b      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a29      	ldr	r2, [pc, #164]	; (8001b18 <TIM_Base_SetConfig+0x124>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d017      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a28      	ldr	r2, [pc, #160]	; (8001b1c <TIM_Base_SetConfig+0x128>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a27      	ldr	r2, [pc, #156]	; (8001b20 <TIM_Base_SetConfig+0x12c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00f      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a26      	ldr	r2, [pc, #152]	; (8001b24 <TIM_Base_SetConfig+0x130>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00b      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <TIM_Base_SetConfig+0x134>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a24      	ldr	r2, [pc, #144]	; (8001b2c <TIM_Base_SetConfig+0x138>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d003      	beq.n	8001aa6 <TIM_Base_SetConfig+0xb2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <TIM_Base_SetConfig+0x13c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d108      	bne.n	8001ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <TIM_Base_SetConfig+0x114>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d003      	beq.n	8001aec <TIM_Base_SetConfig+0xf8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <TIM_Base_SetConfig+0x124>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d103      	bne.n	8001af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	615a      	str	r2, [r3, #20]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	40000800 	.word	0x40000800
 8001b14:	40000c00 	.word	0x40000c00
 8001b18:	40010400 	.word	0x40010400
 8001b1c:	40014000 	.word	0x40014000
 8001b20:	40014400 	.word	0x40014400
 8001b24:	40014800 	.word	0x40014800
 8001b28:	40001800 	.word	0x40001800
 8001b2c:	40001c00 	.word	0x40001c00
 8001b30:	40002000 	.word	0x40002000

08001b34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	f023 0201 	bic.w	r2, r3, #1
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4a28      	ldr	r2, [pc, #160]	; (8001c00 <TIM_TI1_SetConfig+0xcc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01b      	beq.n	8001b9a <TIM_TI1_SetConfig+0x66>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b68:	d017      	beq.n	8001b9a <TIM_TI1_SetConfig+0x66>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <TIM_TI1_SetConfig+0xd0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <TIM_TI1_SetConfig+0x66>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4a24      	ldr	r2, [pc, #144]	; (8001c08 <TIM_TI1_SetConfig+0xd4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00f      	beq.n	8001b9a <TIM_TI1_SetConfig+0x66>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <TIM_TI1_SetConfig+0xd8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00b      	beq.n	8001b9a <TIM_TI1_SetConfig+0x66>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <TIM_TI1_SetConfig+0xdc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d007      	beq.n	8001b9a <TIM_TI1_SetConfig+0x66>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <TIM_TI1_SetConfig+0xe0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d003      	beq.n	8001b9a <TIM_TI1_SetConfig+0x66>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4a20      	ldr	r2, [pc, #128]	; (8001c18 <TIM_TI1_SetConfig+0xe4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <TIM_TI1_SetConfig+0x6a>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <TIM_TI1_SetConfig+0x6c>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f023 0303 	bic.w	r3, r3, #3
 8001baa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e003      	b.n	8001bbe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f023 030a 	bic.w	r3, r3, #10
 8001bd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f003 030a 	and.w	r3, r3, #10
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	621a      	str	r2, [r3, #32]
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40010000 	.word	0x40010000
 8001c04:	40000400 	.word	0x40000400
 8001c08:	40000800 	.word	0x40000800
 8001c0c:	40000c00 	.word	0x40000c00
 8001c10:	40010400 	.word	0x40010400
 8001c14:	40014000 	.word	0x40014000
 8001c18:	40001800 	.word	0x40001800

08001c1c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	f023 0210 	bic.w	r2, r3, #16
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	031b      	lsls	r3, r3, #12
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	621a      	str	r2, [r3, #32]
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b087      	sub	sp, #28
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	621a      	str	r2, [r3, #32]
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b087      	sub	sp, #28
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	031b      	lsls	r3, r3, #12
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8001d60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	031b      	lsls	r3, r3, #12
 8001d66:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	621a      	str	r2, [r3, #32]
}
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0

  HAL_Init();
 8001db4:	f7fe fba6 	bl	8000504 <HAL_Init>
  SystemClock_Config(SYS_CLOCK_FREQ_50_MHZ);
 8001db8:	2032      	movs	r0, #50	; 0x32
 8001dba:	f000 f807 	bl	8001dcc <SystemClock_Config>
  TIM2_Init();
 8001dbe:	f000 f891 	bl	8001ee4 <TIM2_Init>
  GPIO_Init();
 8001dc2:	f000 f8c3 	bl	8001f4c <GPIO_Init>
  LSI_Configure();
 8001dc6:	f000 f883 	bl	8001ed0 <LSI_Configure>

  while(1);
 8001dca:	e7fe      	b.n	8001dca <main+0x1a>

08001dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(uint8_t clock_freq)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b096      	sub	sp, #88	; 0x58
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	623b      	str	r3, [r7, #32]
	Osc_Init.HSIState = RCC_HSI_ON;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	Osc_Init.LSEState = RCC_LSE_ON;
 8001dde:	2301      	movs	r3, #1
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
	Osc_Init.HSICalibrationValue = 16;
 8001de2:	2310      	movs	r3, #16
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8001de6:	2302      	movs	r3, #2
 8001de8:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dea:	2300      	movs	r3, #0
 8001dec:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq)
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	2b54      	cmp	r3, #84	; 0x54
 8001df2:	d01a      	beq.n	8001e2a <SystemClock_Config+0x5e>
 8001df4:	2b78      	cmp	r3, #120	; 0x78
 8001df6:	d02e      	beq.n	8001e56 <SystemClock_Config+0x8a>
 8001df8:	2b32      	cmp	r3, #50	; 0x32
 8001dfa:	d000      	beq.n	8001dfe <SystemClock_Config+0x32>
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
	     break;

	  default:
	   return ;
 8001dfc:	e062      	b.n	8001ec4 <SystemClock_Config+0xf8>
		  Osc_Init.PLL.PLLM = 8;
 8001dfe:	2308      	movs	r3, #8
 8001e00:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 50;
 8001e02:	2332      	movs	r3, #50	; 0x32
 8001e04:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001e06:	2302      	movs	r3, #2
 8001e08:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e12:	230f      	movs	r3, #15
 8001e14:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	2302      	movs	r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e22:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
	     break;
 8001e28:	e02c      	b.n	8001e84 <SystemClock_Config+0xb8>
		  Osc_Init.PLL.PLLM = 8;
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 84;
 8001e2e:	2354      	movs	r3, #84	; 0x54
 8001e30:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001e32:	2302      	movs	r3, #2
 8001e34:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8001e36:	2302      	movs	r3, #2
 8001e38:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3e:	230f      	movs	r3, #15
 8001e40:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e42:	2302      	movs	r3, #2
 8001e44:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4e:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
	     break;
 8001e54:	e016      	b.n	8001e84 <SystemClock_Config+0xb8>
		  Osc_Init.PLL.PLLM = 8;
 8001e56:	2308      	movs	r3, #8
 8001e58:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 120;
 8001e5a:	2378      	movs	r3, #120	; 0x78
 8001e5c:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8001e62:	2302      	movs	r3, #2
 8001e64:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 8001e66:	2302      	movs	r3, #2
 8001e68:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e6a:	230f      	movs	r3, #15
 8001e6c:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e7a:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e80:	61fb      	str	r3, [r7, #28]
	     break;
 8001e82:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8001e84:	f107 0320 	add.w	r3, r7, #32
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f957 	bl	800113c <HAL_RCC_OscConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <SystemClock_Config+0xcc>
	{
			Error_Handler();
 8001e94:	f000 f87e 	bl	8001f94 <Error_Handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, FLASH_LATENCY_2) != HAL_OK)
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fe52 	bl	8000b48 <HAL_RCC_ClockConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0xe2>
	{
		Error_Handler();
 8001eaa:	f000 f873 	bl	8001f94 <Error_Handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8001eae:	f7fe ff99 	bl	8000de4 <HAL_RCC_GetHCLKFreq>
 8001eb2:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_SYSTICK_Config(hclk_freq/1000);
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <SystemClock_Config+0x100>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fc97 	bl	80007f2 <HAL_SYSTICK_Config>

}
 8001ec4:	3758      	adds	r7, #88	; 0x58
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	10624dd3 	.word	0x10624dd3

08001ed0 <LSI_Configure>:

void LSI_Configure(void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
	if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK) {
		Error_Handler();
	}
#endif

	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7fe ff1a 	bl	8000d14 <HAL_RCC_MCOConfig>

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <TIM2_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void TIM2_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	htim2.Instance = TIM2;
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <TIM2_Init+0x60>)
 8001eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eee:	601a      	str	r2, [r3, #0]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <TIM2_Init+0x60>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
	htim2.Init.Prescaler = 1;
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <TIM2_Init+0x60>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	605a      	str	r2, [r3, #4]
	htim2.Init.Period = 0xFFFFFFFF;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <TIM2_Init+0x60>)
 8001efe:	f04f 32ff 	mov.w	r2, #4294967295
 8001f02:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001f04:	480f      	ldr	r0, [pc, #60]	; (8001f44 <TIM2_Init+0x60>)
 8001f06:	f7ff fb73 	bl	80015f0 <HAL_TIM_IC_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <TIM2_Init+0x30>
		Error_Handler();
 8001f10:	f000 f840 	bl	8001f94 <Error_Handler>
	}

	tim2_IC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <TIM2_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
	tim2_IC.ICFilter = 0;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <TIM2_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
	tim2_IC.ICPolarity = TIM_ICPOLARITY_RISING;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <TIM2_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
	tim2_IC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <TIM2_Init+0x64>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	605a      	str	r2, [r3, #4]

	if (HAL_TIM_IC_ConfigChannel(&htim2, &tim2_IC, TIM_CHANNEL_1) != HAL_OK) {
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4906      	ldr	r1, [pc, #24]	; (8001f48 <TIM2_Init+0x64>)
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <TIM2_Init+0x60>)
 8001f32:	f7ff fc90 	bl	8001856 <HAL_TIM_IC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <TIM2_Init+0x5c>
		Error_Handler();
 8001f3c:	f000 f82a 	bl	8001f94 <Error_Handler>
	}

}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	2000002c 	.word	0x2000002c
 8001f48:	2000006c 	.word	0x2000006c

08001f4c <GPIO_Init>:

void GPIO_Init(void) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio5;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <GPIO_Init+0x40>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <GPIO_Init+0x40>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <GPIO_Init+0x40>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
	gpio5.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
	gpio5.Pin = GPIO_PIN_5;
 8001f72:	2320      	movs	r3, #32
 8001f74:	607b      	str	r3, [r7, #4]
	gpio5.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOA, &gpio5);
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4804      	ldr	r0, [pc, #16]	; (8001f90 <GPIO_Init+0x44>)
 8001f80:	f7fe fc50 	bl	8000824 <HAL_GPIO_Init>
}
 8001f84:	bf00      	nop
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
	while(1);
 8001f98:	e7fe      	b.n	8001f98 <Error_Handler+0x4>
	...

08001f9c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_MspInit+0x7c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_MspInit+0x7c>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_MspInit+0x7c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_MspInit+0x7c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a14      	ldr	r2, [pc, #80]	; (8002018 <HAL_MspInit+0x7c>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_MspInit+0x7c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fda:	2003      	movs	r0, #3
 8001fdc:	f7fe fbd4 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>
  SCB->SHCSR |= (0x3 << 16);
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_MspInit+0x80>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	; (800201c <HAL_MspInit+0x80>)
 8001fe6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001fea:	6253      	str	r3, [r2, #36]	; 0x24

  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	f06f 000b 	mvn.w	r0, #11
 8001ff4:	f7fe fbd3 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	f06f 000a 	mvn.w	r0, #10
 8002000:	f7fe fbcd 	bl	800079e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	f06f 0009 	mvn.w	r0, #9
 800200c:	f7fe fbc7 	bl	800079e <HAL_NVIC_SetPriority>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef tim2ch1_gpio;
	 //1. enable the peripheral clock for the timer2 peripheral
	 __HAL_RCC_TIM2_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_TIM_IC_MspInit+0x70>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_TIM_IC_MspInit+0x70>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_TIM_IC_MspInit+0x70>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_TIM_IC_MspInit+0x70>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_TIM_IC_MspInit+0x70>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_TIM_IC_MspInit+0x70>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]

	 //2. Configure a gpio to behave as timer2 channel 1
	 tim2ch1_gpio.Pin = GPIO_PIN_0;
 8002060:	2301      	movs	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
	 tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	61bb      	str	r3, [r7, #24]
	 tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 8002068:	2301      	movs	r3, #1
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA, &tim2ch1_gpio);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4808      	ldr	r0, [pc, #32]	; (8002094 <HAL_TIM_IC_MspInit+0x74>)
 8002074:	f7fe fbd6 	bl	8000824 <HAL_GPIO_Init>

	 //3. nvic settings
	 HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 8002078:	2200      	movs	r2, #0
 800207a:	210f      	movs	r1, #15
 800207c:	201c      	movs	r0, #28
 800207e:	f7fe fb8e 	bl	800079e <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002082:	201c      	movs	r0, #28
 8002084:	f7fe fba7 	bl	80007d6 <HAL_NVIC_EnableIRQ>
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000

08002098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  while (1);
 800209c:	e7fe      	b.n	800209c <HardFault_Handler+0x4>

0800209e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  while (1);
 80020a2:	e7fe      	b.n	80020a2 <MemManage_Handler+0x4>

080020a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  while (1);
 80020a8:	e7fe      	b.n	80020a8 <BusFault_Handler+0x4>

080020aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  while (1);
 80020ae:	e7fe      	b.n	80020ae <UsageFault_Handler+0x4>

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0

  HAL_IncTick();
 80020b4:	f7fe fa78 	bl	80005a8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80020b8:	f7fe fba7 	bl	800080a <HAL_SYSTICK_IRQHandler>

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <TIM2_IRQHandler+0x10>)
 80020c6:	f7ff fabe 	bl	8001646 <HAL_TIM_IRQHandler>
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000002c 	.word	0x2000002c

080020d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <SystemInit+0x28>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	4a07      	ldr	r2, [pc, #28]	; (80020fc <SystemInit+0x28>)
 80020e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <SystemInit+0x28>)
 80020ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ee:	609a      	str	r2, [r3, #8]
#endif
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002138 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002106:	e003      	b.n	8002110 <LoopCopyDataInit>

08002108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800210a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800210c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800210e:	3104      	adds	r1, #4

08002110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002110:	480b      	ldr	r0, [pc, #44]	; (8002140 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002118:	d3f6      	bcc.n	8002108 <CopyDataInit>
  ldr  r2, =_sbss
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800211c:	e002      	b.n	8002124 <LoopFillZerobss>

0800211e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800211e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002120:	f842 3b04 	str.w	r3, [r2], #4

08002124 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002126:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002128:	d3f9      	bcc.n	800211e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800212a:	f7ff ffd3 	bl	80020d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212e:	f000 f811 	bl	8002154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002132:	f7ff fe3d 	bl	8001db0 <main>
  bx  lr    
 8002136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002138:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800213c:	080021d4 	.word	0x080021d4
  ldr  r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002144:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002148:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800214c:	2000007c 	.word	0x2000007c

08002150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC_IRQHandler>
	...

08002154 <__libc_init_array>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	4e0d      	ldr	r6, [pc, #52]	; (800218c <__libc_init_array+0x38>)
 8002158:	4c0d      	ldr	r4, [pc, #52]	; (8002190 <__libc_init_array+0x3c>)
 800215a:	1ba4      	subs	r4, r4, r6
 800215c:	10a4      	asrs	r4, r4, #2
 800215e:	2500      	movs	r5, #0
 8002160:	42a5      	cmp	r5, r4
 8002162:	d109      	bne.n	8002178 <__libc_init_array+0x24>
 8002164:	4e0b      	ldr	r6, [pc, #44]	; (8002194 <__libc_init_array+0x40>)
 8002166:	4c0c      	ldr	r4, [pc, #48]	; (8002198 <__libc_init_array+0x44>)
 8002168:	f000 f818 	bl	800219c <_init>
 800216c:	1ba4      	subs	r4, r4, r6
 800216e:	10a4      	asrs	r4, r4, #2
 8002170:	2500      	movs	r5, #0
 8002172:	42a5      	cmp	r5, r4
 8002174:	d105      	bne.n	8002182 <__libc_init_array+0x2e>
 8002176:	bd70      	pop	{r4, r5, r6, pc}
 8002178:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800217c:	4798      	blx	r3
 800217e:	3501      	adds	r5, #1
 8002180:	e7ee      	b.n	8002160 <__libc_init_array+0xc>
 8002182:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002186:	4798      	blx	r3
 8002188:	3501      	adds	r5, #1
 800218a:	e7f2      	b.n	8002172 <__libc_init_array+0x1e>
 800218c:	080021cc 	.word	0x080021cc
 8002190:	080021cc 	.word	0x080021cc
 8002194:	080021cc 	.word	0x080021cc
 8002198:	080021d0 	.word	0x080021d0

0800219c <_init>:
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219e:	bf00      	nop
 80021a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a2:	bc08      	pop	{r3}
 80021a4:	469e      	mov	lr, r3
 80021a6:	4770      	bx	lr

080021a8 <_fini>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr
